name: Deploy Static Website

on:
  # Manual trigger using GitHub Actions UI
  workflow_dispatch:
    inputs:
      domain_name:
        description: 'Domain name for the website'
        required: false
        default: 'greateightgoals.com'
        type: string
      stack_name:
        description: 'CloudFormation stack name for the static website'
        required: false
        default: ''  # Empty default so we can compute dynamically
        type: string
      force_bucket_recreation:
        description: 'Force recreation of S3 bucket'
        required: false
        default: false
        type: boolean
      region:
        description: 'AWS region'
        required: false
        default: 'us-east-1'
        type: string
      environment:
        description: 'Environment (dev/prod) - for reference only'
        required: false
        default: 'prod'
        type: choice
        options:
          - dev
          - prod
      command:
        description: 'Command to run (deploy, update-green, etc.)'
        required: false
        default: 'deploy'
        type: string
      additional_args:
        description: 'Additional arguments to pass to the command'
        required: false
        type: string
      skip_content_upload:
        description: 'Skip uploading content to S3 bucket'
        required: false
        default: false
        type: boolean
      skip_dns_record:
        description: 'Skip creating/updating Route 53 DNS record'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for OIDC authentication
      contents: read    # Required to checkout the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          # Don't use pip cache to avoid the cache folder error

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.region || 'us-east-1' }}

      # Validate IAM permissions
      - name: Validate IAM permissions
        id: validate_permissions
        shell: bash
        run: |
          echo "Validating IAM permissions..."
          # Check if we can list IAM roles (basic IAM read permission check)
          aws iam get-role --role-name "AWS_CloudFormation_Role" 2>&1 || echo "Warning: Limited IAM read permissions. Deployment may fail if CAPABILITY_NAMED_IAM permissions are insufficient."
          
          # Get caller identity to confirm which role we're using
          caller_identity=$(aws sts get-caller-identity)
          echo "$caller_identity"
          
          # Extract account ID
          account_id=$(echo "$caller_identity" | grep -o '"Account": "[0-9]\+"' | cut -d '"' -f 4)
          echo "AWS Account ID: $account_id"
          echo "account_id=$account_id" >> $GITHUB_OUTPUT

      # Use the standard stack name to match existing infrastructure
      - name: Set stack name
        id: set_stack_name
        shell: bash
        run: |
          # Use the provided stack name or default to static-website
          if [ -n "${{ github.event.inputs.stack_name }}" ]; then
            dynamic_stack_name="${{ github.event.inputs.stack_name }}"
          else
            # Use the fixed name 'static-website' to match existing stack
            dynamic_stack_name="static-website"
          fi
          
          echo "Using stack name: ${dynamic_stack_name}"
          echo "stack_name=${dynamic_stack_name}" >> $GITHUB_OUTPUT

      # Check if stack exists and is in ROLLBACK_COMPLETE state
      - name: Check stack status and delete if in ROLLBACK_COMPLETE
        shell: bash
        run: |
          echo "Checking status of stack ${{ steps.set_stack_name.outputs.stack_name }}..."
          stack_status=$(aws cloudformation describe-stacks --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" --query "Stacks[0].StackStatus" --output text --region ${{ inputs.region || 'us-east-1' }} 2>/dev/null || echo "STACK_NOT_FOUND")
          
          echo "Stack status: ${stack_status}"
          
          if [ "${stack_status}" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting stack before redeployment..."
            aws cloudformation delete-stack --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" --region ${{ inputs.region || 'us-east-1' }}
            
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" --region ${{ inputs.region || 'us-east-1' }}
            echo "Stack deletion complete."
          elif [ "${stack_status}" = "STACK_NOT_FOUND" ]; then
            echo "Stack does not exist. Will create a new stack."
          else
            echo "Stack exists and is not in ROLLBACK_COMPLETE state. Proceeding with update."
          fi

      - name: Run command
        run: |
          # Make the script executable
          chmod +x ./aws-static-website/run.sh
          
          # Build the command with dynamic inputs
          CMD="./aws-static-website/run.sh ${{ inputs.command || 'deploy' }}"
          
          # Add domain name if specified
          if [[ -n "${{ inputs.domain_name }}" ]]; then
            CMD="$CMD --domain-name ${{ inputs.domain_name }}"
          fi
          
          # Add stack name using the dynamically computed value
          CMD="$CMD --stack-name ${{ steps.set_stack_name.outputs.stack_name }}"
          
          # Add force bucket recreation if true
          if [[ "${{ inputs.force_bucket_recreation }}" == "true" ]]; then
            CMD="$CMD --force-bucket-recreation"
          fi
          
          # Add skip content upload if true
          if [[ "${{ inputs.skip_content_upload }}" == "true" ]]; then
            CMD="$CMD --skip-content-upload"
          fi
          
          # Add skip DNS record if true
          if [[ "${{ inputs.skip_dns_record }}" == "true" ]]; then
            CMD="$CMD --skip-dns-record"
          fi
          
          # Add any additional arguments
          if [[ -n "${{ inputs.additional_args }}" ]]; then
            CMD="$CMD ${{ inputs.additional_args }}"
          fi
          
          # Execute the command
          echo "Executing: $CMD"
          eval "$CMD"
          
      - name: Verify deployment
        run: |
          # Check if the CloudFormation stack exists
          echo "Verifying CloudFormation stack ${{ steps.set_stack_name.outputs.stack_name }}..."
          aws cloudformation describe-stacks \
            --stack-name ${{ steps.set_stack_name.outputs.stack_name }} \
            --region ${{ inputs.region || 'us-east-1' }} \
            --query "Stacks[0].{Name:StackName, Status:StackStatus, Outputs:Outputs}" \
            --output table
          
          # If the stack has outputs, try to get the CloudFront distribution ID
          CF_DIST_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ steps.set_stack_name.outputs.stack_name }} \
            --region ${{ inputs.region || 'us-east-1' }} \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text)
          
          if [[ -n "$CF_DIST_ID" ]]; then
            echo "CloudFront Distribution ID: $CF_DIST_ID"
            
            # Get CloudFront distribution details
            aws cloudfront get-distribution \
              --id "$CF_DIST_ID" \
              --query "Distribution.{Id:Id, DomainName:DomainName, Status:Status, Enabled:DistributionConfig.Enabled, Origins:DistributionConfig.Origins.Items[].DomainName}" \
              --output table
          fi
