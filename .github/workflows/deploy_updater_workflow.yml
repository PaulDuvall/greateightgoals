# .github/workflows/deploy_updater_workflow.yml
name: Deploy Website Updater

on:
  workflow_dispatch:
    inputs:
      stack_name:
        description: 'CloudFormation stack name for the website updater'
        required: false
        default: ''  # Empty default so we can compute dynamically
        type: string
      website_stack:
        description: 'Name of the static website CloudFormation stack'
        required: false
        default: ''  # Empty default so we can compute dynamically
        type: string
      region:
        description: 'AWS region'
        required: false
        default: 'us-east-1'
        type: string
      celebrate:
        description: 'Activate celebration mode for Ovechkin breaking Gretzkys record'
        required: false
        default: false
        type: boolean
      schedule:
        description: |
          Schedule expression for updates. Examples:
          - cron(0 * * * ? *) - Run at the top of every hour (00:00)
          - cron(15 * * * ? *) - Run at 15 minutes past every hour (00:15)
          - cron(0/30 * * * ? *) - Run every 30 minutes, starting at the top of the hour
          - rate(30 minutes) - Run every 30 minutes (not synchronized to clock)
        required: false
        default: 'cron(0/30 * * * ? *)'
        type: string
      skip_cfn:
        description: 'Skip CloudFormation deployment (only update Lambda code)'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Environment (dev/prod) - for reference only, not used in stack naming'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

  push:
    paths:
      - 'aws-static-website/**'
      - 'ovechkin_tracker/**'
      - '.github/workflows/deploy_updater_workflow.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for OIDC authentication
      contents: read    # Required to checkout the repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.GHA_OIDC_ROLE_ARN }}
          aws-region: ${{ inputs.region || 'us-east-1' }}

      # Validate IAM permissions
      - name: Validate IAM permissions
        id: validate_permissions
        shell: bash
        run: |
          echo "Validating IAM permissions..."
          # Check if we can list IAM roles (basic IAM read permission check)
          aws iam get-role --role-name "AWS_CloudFormation_Role" 2>&1 || echo "Warning: Limited IAM read permissions. Deployment may fail if CAPABILITY_NAMED_IAM permissions are insufficient."
          
          # Get caller identity to confirm which role we're using
          caller_identity=$(aws sts get-caller-identity)
          echo "$caller_identity"
          
          # Extract account ID
          account_id=$(echo "$caller_identity" | grep -o '"Account": "[0-9]\+"' | cut -d '"' -f 4)
          echo "AWS Account ID: $account_id"
          echo "account_id=$account_id" >> $GITHUB_OUTPUT

      # Dynamically compute the stack name using the repo name if not provided
      - name: Set default stack name if not provided
        id: set_stack_name
        shell: bash
        run: |
          repo_name="${GITHUB_REPOSITORY##*/}"
          if [ -z "${{ github.event.inputs.stack_name }}" ]; then
            dynamic_stack_name="${repo_name}-website-updater"
          else
            dynamic_stack_name="${{ github.event.inputs.stack_name }}"
          fi
          echo "Computed stack name: ${dynamic_stack_name}"
          echo "stack_name=${dynamic_stack_name}" >> $GITHUB_OUTPUT

      # Check if stack exists and is in ROLLBACK_COMPLETE state
      - name: Check stack status and delete if in ROLLBACK_COMPLETE
        shell: bash
        run: |
          echo "Checking status of stack ${{ steps.set_stack_name.outputs.stack_name }}..."
          stack_status=$(aws cloudformation describe-stacks --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" --query "Stacks[0].StackStatus" --output text --region ${{ inputs.region || 'us-east-1' }} 2>/dev/null || echo "STACK_NOT_FOUND")
          
          echo "Stack status: ${stack_status}"
          
          if [ "${stack_status}" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state. Deleting stack before redeployment..."
            aws cloudformation delete-stack --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" --region ${{ inputs.region || 'us-east-1' }}
            
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" --region ${{ inputs.region || 'us-east-1' }}
            echo "Stack deletion complete."
          elif [ "${stack_status}" = "STACK_NOT_FOUND" ]; then
            echo "Stack does not exist. Will create a new stack."
          else
            echo "Stack exists and is not in ROLLBACK_COMPLETE state. Proceeding with update."
          fi

      # Dynamically compute the website stack name using the repo name if not provided
      - name: Set default website stack if not provided
        id: set_website_stack
        shell: bash
        run: |
          repo_name="${GITHUB_REPOSITORY##*/}"
          if [ -z "${{ github.event.inputs.website_stack }}" ]; then
            dynamic_website_stack="${repo_name}-static-website"
          else
            dynamic_website_stack="${{ github.event.inputs.website_stack }}"
          fi
          echo "Computed website_stack: ${dynamic_website_stack}"
          echo "website_stack=${dynamic_website_stack}" >> $GITHUB_OUTPUT

      - name: Create build directory
        run: mkdir -p aws-static-website/build

      - name: Build Lambda deployment package
        run: |
          # Create a temporary directory for packaging
          TMP_DIR=$(mktemp -d)
          echo "Using temporary directory: $TMP_DIR"

          # Copy Lambda function code
          cp aws-static-website/lambda/update_website_lambda.py "$TMP_DIR/"

          # Copy the update_website.py script
          cp aws-static-website/update_website.py "$TMP_DIR/"
          
          # Copy the celebrate.py script for celebration mode
          cp aws-static-website/celebrate.py "$TMP_DIR/"

          # Create a directory structure for the static content
          mkdir -p "$TMP_DIR/static"
          cp -r aws-static-website/static/* "$TMP_DIR/static/" 2>/dev/null || echo "No static files found to copy"
          
          # Copy the assets directory for the favicon and other resources
          mkdir -p "$TMP_DIR/assets"
          cp -r aws-static-website/assets/* "$TMP_DIR/assets/" 2>/dev/null || echo "No asset files found to copy"

          # Copy the ovechkin_tracker module if it exists
          if [ -d "ovechkin_tracker" ]; then
            echo "Copying ovechkin_tracker module..."
            mkdir -p "$TMP_DIR/ovechkin_tracker"
            cp -r ovechkin_tracker/* "$TMP_DIR/ovechkin_tracker/"
            if [ ! -f "$TMP_DIR/ovechkin_tracker/__init__.py" ]; then
              echo "Creating __init__.py file for ovechkin_tracker module..."
              touch "$TMP_DIR/ovechkin_tracker/__init__.py"
            fi
          fi

          # Install dependencies - optimize by only installing what's needed
          echo "Installing dependencies..."
          pip install --no-cache-dir -r aws-static-website/lambda/requirements-lambda.txt -t "$TMP_DIR"

          # Create zip file - optimize compression level for speed
          echo "Creating deployment package..."
          cd "$TMP_DIR"
          zip -r -1 "$GITHUB_WORKSPACE/aws-static-website/build/lambda_package.zip" .

      - name: Deploy CloudFormation stack
        if: ${{ !github.event.inputs.skip_cfn }}
        run: |
          echo "Deploying CloudFormation stack..."
          aws cloudformation deploy \
            --template-file aws-static-website/cloudformation/website-updater.yaml \
            --stack-name "${{ steps.set_stack_name.outputs.stack_name }}" \
            --parameter-overrides \
              StackName=${{ steps.set_website_stack.outputs.website_stack }} \
              ScheduleExpression="${{ inputs.schedule || 'cron(0/30 * * * ? *)' }}" \
              TopicName="${{ steps.set_stack_name.outputs.stack_name }}-errors" \
              FunctionName="${{ steps.set_stack_name.outputs.stack_name }}" \
              RuleName="${{ steps.set_stack_name.outputs.stack_name }}-update-schedule" \
              QueueName="${{ steps.set_stack_name.outputs.stack_name }}-dlq" \
              RoleName="${{ steps.set_stack_name.outputs.stack_name }}-role" \
              MetricName="${{ steps.set_stack_name.outputs.stack_name }}ErrorCount" \
              AlarmName="${{ steps.set_stack_name.outputs.stack_name }}-error-alarm" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ inputs.region || 'us-east-1' }} \
            --no-fail-on-empty-changeset

      - name: Update Lambda function code
        run: |
          echo "Updating Lambda function code..."
          aws lambda update-function-code \
            --function-name "${{ steps.set_stack_name.outputs.stack_name }}" \
            --zip-file fileb://aws-static-website/build/lambda_package.zip \
            --region ${{ inputs.region || 'us-east-1' }}

      - name: Test Lambda function (standard mode)
        if: ${{ github.event.inputs.celebrate != 'true' }}
        run: |
          echo "Testing Lambda function in standard mode..."
          aws lambda invoke \
            --function-name "${{ steps.set_stack_name.outputs.stack_name }}" \
            --payload '{"source": "aws.events"}' \
            --cli-binary-format raw-in-base64-out \
            --region ${{ inputs.region || 'us-east-1' }} \
            /tmp/lambda-response.json
          
          echo "Lambda response payload:"
          cat /tmp/lambda-response.json

      - name: Test Lambda function with celebration mode
        if: ${{ github.event.inputs.celebrate == 'true' }}
        run: |
          echo "Testing Lambda function with celebration mode..."
          response=$(aws lambda invoke \
            --function-name "${{ steps.set_stack_name.outputs.stack_name }}" \
            --payload '{"source": "aws.events", "celebrate": true}' \
            --cli-binary-format raw-in-base64-out \
            --region ${{ inputs.region || 'us-east-1' }} \
            /tmp/lambda-response.json)
          
          echo "Lambda response status: $response"
          echo "Lambda response payload:"
          cat /tmp/lambda-response.json
          
          # Check if the response contains the celebration mode confirmation
          if grep -q "Celebration mode activated" /tmp/lambda-response.json; then
            echo "Celebration mode activated successfully!"
          else
            echo "Celebration mode activation failed!"
            exit 1
          fi

      - name: Get Lambda function details
        run: |
          echo "Getting Lambda function details..."
          aws lambda get-function \
            --function-name "${{ steps.set_stack_name.outputs.stack_name }}" \
            --query "Configuration.{FunctionName:FunctionName, Runtime:Runtime, Timeout:Timeout, MemorySize:MemorySize, LastModified:LastModified}" \
            --output table \
            --region ${{ inputs.region || 'us-east-1' }}

      - name: Get EventBridge rule details
        if: ${{ !github.event.inputs.skip_cfn }}
        run: |
          echo "Getting EventBridge rule details..."
          aws events describe-rule \
            --name "${{ steps.set_stack_name.outputs.stack_name }}-update-schedule" \
            --query "{Name:Name, ScheduleExpression:ScheduleExpression, State:State}" \
            --output table \
            --region ${{ inputs.region || 'us-east-1' }}
